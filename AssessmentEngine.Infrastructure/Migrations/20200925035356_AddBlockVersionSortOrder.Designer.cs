// <auto-generated />
using System;
using AssessmentEngine.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AssessmentEngine.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200925035356_AddBlockVersionSortOrder")]
    partial class AddBlockVersionSortOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d587953-2fb4-4198-9a5d-e64095439783"),
                            ConcurrencyStamp = "3256948c-b7f7-446d-8c89-4b130466abc9",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("d8105d5f-3a2e-428b-8c57-36398b196379"),
                            ConcurrencyStamp = "b412ab30-1fd2-485a-95d0-c4a13f2f5c99",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationRoleClaims");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ParticipantId")
                        .HasColumnType("text");

                    b.Property<int?>("ParticipantTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("ParticipantTypeId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61479990-b62a-40e4-8973-f6d6eb1ab9b8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66046443-f6a0-4c4a-beed-902dc49f1903",
                            Email = "admin@assessment.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ASSESSMENT.COM",
                            NormalizedUserName = "ADMIN@ASSESSMENT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwu9ZqklcHcnJ2rf9wzQDYQZKFmGpJ6Ye65my0yvVsjqBW4yfFZ+gli0PicTseu0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QJYMV3R4ITNYXH7EV3JVN3M2DZXEQZEF",
                            TwoFactorEnabled = false,
                            UserName = "admin@assessment.com"
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ApplicationUserAuditTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserAuditTypeId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserAudits");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserAuditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserAuditTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 481, DateTimeKind.Local).AddTicks(6780),
                            Name = "Login",
                            SortOrder = 1,
                            Uid = new Guid("aa56a491-c78c-49dd-8cf6-1cfca5b0207d"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 522, DateTimeKind.Local).AddTicks(9200)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 523, DateTimeKind.Local).AddTicks(2660),
                            Name = "Logout",
                            SortOrder = 2,
                            Uid = new Guid("eafbcf82-b4dc-479b-8060-ea0c1d473ced"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 523, DateTimeKind.Local).AddTicks(2700)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 523, DateTimeKind.Local).AddTicks(2990),
                            Name = "Lockout",
                            SortOrder = 3,
                            Uid = new Guid("7facb441-2213-451a-8bb5-39277c2bf232"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 523, DateTimeKind.Local).AddTicks(3000)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 523, DateTimeKind.Local).AddTicks(3030),
                            Name = "PasswordReset",
                            SortOrder = 4,
                            Uid = new Guid("e14f788f-3c69-45d9-972d-c466899c5fa0"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 523, DateTimeKind.Local).AddTicks(3040)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserClaims");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("61479990-b62a-40e4-8973-f6d6eb1ab9b8"),
                            RoleId = new Guid("5d587953-2fb4-4198-9a5d-e64095439783")
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUserTokens");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentVersionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentVersionId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentBlockId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer");

                    b.Property<int>("BlockTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeriesRecall")
                        .HasColumnType("text");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentBlockUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlockTypeId");

                    b.ToTable("AssessmentBlocks");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentParticipantId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentParticipantUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentParticipants");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AssessmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 557, DateTimeKind.Local).AddTicks(8310),
                            Name = "DualNBack",
                            SortOrder = 1,
                            Uid = new Guid("db525c47-67b4-479a-98a0-a16a5726c5c8"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 557, DateTimeKind.Local).AddTicks(8360)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 557, DateTimeKind.Local).AddTicks(9090),
                            Name = "EFT",
                            SortOrder = 2,
                            Uid = new Guid("d9118b60-dd04-41aa-a702-035a940b33d1"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 557, DateTimeKind.Local).AddTicks(9110)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentVersionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("BlankScreenViewingTime")
                        .HasColumnType("integer");

                    b.Property<int?>("CognitiveLoadViewingTime")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ImageViewingTime")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentVersionUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("VersionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentTypeId");

                    b.ToTable("AssessmentVersions");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.BlockType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BlockTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4220),
                            Name = "EP1",
                            SortOrder = 1,
                            Uid = new Guid("97d23e90-70e8-443f-b57f-ffd88f4726d6"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4280)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4910),
                            Name = "EP2",
                            SortOrder = 2,
                            Uid = new Guid("110d0ff2-219e-4230-83dc-d37f21ecdfff"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4920)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4950),
                            Name = "EN1",
                            SortOrder = 3,
                            Uid = new Guid("e198724b-9340-4cc2-a2f5-a194691c1a28"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4960)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4980),
                            Name = "EN2",
                            SortOrder = 4,
                            Uid = new Guid("dda15917-71fa-4a46-b6a2-582c9a0f5342"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(4990)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5170),
                            Name = "SP1",
                            SortOrder = 5,
                            Uid = new Guid("d1eb0142-542e-42c0-ba94-6dfe55fb48d1"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5170)
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5210),
                            Name = "SP2",
                            SortOrder = 6,
                            Uid = new Guid("0b5853af-9a01-43bc-ace4-6a5adae2c382"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5220)
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5240),
                            Name = "SN1",
                            SortOrder = 7,
                            Uid = new Guid("2b781410-d181-4637-9bc2-28b5fbd5e742"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5250)
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5270),
                            Name = "SN2",
                            SortOrder = 8,
                            Uid = new Guid("66030510-2851-4d1f-9dc9-8ad9fe7fba79"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5280)
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5300),
                            Name = "VP1",
                            SortOrder = 9,
                            Uid = new Guid("805e10cd-3a1d-4fcc-97dc-ab3111be12bf"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5310)
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5340),
                            Name = "VP2",
                            SortOrder = 10,
                            Uid = new Guid("5bbe72fd-113d-490b-a67f-8f908e79536f"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5340)
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5370),
                            Name = "VN1",
                            SortOrder = 11,
                            Uid = new Guid("c3539c3b-621f-455c-90d8-0b50a2bb1b47"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5370)
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5390),
                            Name = "VN2",
                            SortOrder = 12,
                            Uid = new Guid("6f5ad4e6-0c21-423c-92e1-4006ac13fcb5"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 563, DateTimeKind.Local).AddTicks(5400)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.BlockVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockVersionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssessmentVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("BlockTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("CognitiveLoad")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Series")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockVersionUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentVersionId");

                    b.HasIndex("BlockTypeId");

                    b.ToTable("BlockVersions");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ParticipantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParticipantTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParticipantTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParticipantTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 575, DateTimeKind.Local).AddTicks(8970),
                            Name = "Civilian",
                            SortOrder = 1,
                            Uid = new Guid("4d77c33b-a2a3-4af7-bbdb-813c7d68df27"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 575, DateTimeKind.Local).AddTicks(9090)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 24, 22, 53, 55, 576, DateTimeKind.Local).AddTicks(1280),
                            Name = "Veteran",
                            SortOrder = 2,
                            Uid = new Guid("45bdce13-7dd3-44a6-919c-cde81b8018f0"),
                            UpdateDate = new DateTime(2020, 9, 24, 22, 53, 55, 576, DateTimeKind.Local).AddTicks(1310)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ParticipantType", null)
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ParticipantTypeId");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserAudit", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUserAuditType", "ApplicationUserAuditType")
                        .WithMany("ApplicationUserAudits")
                        .HasForeignKey("ApplicationUserAuditTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserAudits")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.AssessmentVersion", "AssessmentVersion")
                        .WithMany("Assessments")
                        .HasForeignKey("AssessmentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentBlock", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentBlocks")
                        .HasForeignKey("BlockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.BlockType", "BlockType")
                        .WithMany("AssessmentBlocks")
                        .HasForeignKey("BlockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentParticipant", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("AssessmentParticipants")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentParticipants")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentVersion", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.AssessmentType", "AssessmentType")
                        .WithMany("AssessmentVersions")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.BlockVersion", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.AssessmentVersion", null)
                        .WithMany("BlockVersions")
                        .HasForeignKey("AssessmentVersionId");

                    b.HasOne("AssessmentEngine.Domain.Entities.BlockType", "BlockType")
                        .WithMany()
                        .HasForeignKey("BlockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
