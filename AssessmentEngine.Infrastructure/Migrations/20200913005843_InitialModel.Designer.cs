// <auto-generated />
using System;
using AssessmentEngine.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AssessmentEngine.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200913005843_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("ApplicationRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d587953-2fb4-4198-9a5d-e64095439783"),
                            ConcurrencyStamp = "ecfb8b45-dd88-49ba-96a2-9988baa7756b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("d8105d5f-3a2e-428b-8c57-36398b196379"),
                            ConcurrencyStamp = "15b7d210-1b99-4b85-9609-9a228adb7534",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.ToTable("ApplicationRoleClaims");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ParticipantId")
                        .HasColumnName("participant_id")
                        .HasColumnType("text");

                    b.Property<int?>("ParticipantTypeId")
                        .HasColumnName("participant_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ParticipantTypeId")
                        .HasName("ix_users_participant_type_id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61479990-b62a-40e4-8973-f6d6eb1ab9b8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66046443-f6a0-4c4a-beed-902dc49f1903",
                            Email = "admin@assessment.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ASSESSMENT.COM",
                            NormalizedUserName = "ADMIN@ASSESSMENT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwu9ZqklcHcnJ2rf9wzQDYQZKFmGpJ6Ye65my0yvVsjqBW4yfFZ+gli0PicTseu0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QJYMV3R4ITNYXH7EV3JVN3M2DZXEQZEF",
                            TwoFactorEnabled = false,
                            UserName = "admin@assessment.com"
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnName("action_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ApplicationUserAuditTypeId")
                        .HasColumnName("application_user_audit_type_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnName("application_user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_user_audits");

                    b.HasIndex("ApplicationUserAuditTypeId")
                        .HasName("ix_application_user_audits_application_user_audit_type_id");

                    b.HasIndex("ApplicationUserId")
                        .HasName("ix_application_user_audits_application_user_id");

                    b.ToTable("application_user_audits");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserAuditType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApplicationUserAuditTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_application_user_audit_types");

                    b.ToTable("application_user_audit_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 305, DateTimeKind.Local).AddTicks(9220),
                            Name = "Login",
                            SortOrder = 1,
                            Uid = new Guid("7787220a-51f0-452b-9169-bed1d0e223c1"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 325, DateTimeKind.Local).AddTicks(7770)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 325, DateTimeKind.Local).AddTicks(9820),
                            Name = "Logout",
                            SortOrder = 2,
                            Uid = new Guid("731a8f8b-2abe-4dc4-8e58-7dad814dc19c"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 325, DateTimeKind.Local).AddTicks(9840)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 325, DateTimeKind.Local).AddTicks(9990),
                            Name = "Lockout",
                            SortOrder = 3,
                            Uid = new Guid("7e6730e6-8783-4b95-8822-7aa847667d4d"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 326, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 326, DateTimeKind.Local).AddTicks(10),
                            Name = "PasswordReset",
                            SortOrder = 4,
                            Uid = new Guid("7087d4eb-fd7b-4e6c-a3b0-eaf12e076ab6"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 326, DateTimeKind.Local).AddTicks(20)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.ToTable("ApplicationUserClaims");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_user_logins_user_id");

                    b.ToTable("ApplicationUserLogins");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.ToTable("ApplicationUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("61479990-b62a-40e4-8973-f6d6eb1ab9b8"),
                            RoleId = new Guid("5d587953-2fb4-4198-9a5d-e64095439783")
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("ApplicationUserTokens");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentVersionId")
                        .HasColumnName("assessment_version_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnName("completed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnName("deleted_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnName("started_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_assessments");

                    b.HasIndex("AssessmentVersionId")
                        .HasName("ix_assessments_assessment_version_id");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentBlockId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentId")
                        .HasColumnName("assessment_id")
                        .HasColumnType("integer");

                    b.Property<int>("BlockTypeId")
                        .HasColumnName("block_type_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnName("completed_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeriesRecall")
                        .HasColumnName("series_recall")
                        .HasColumnType("text");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentBlockUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_assessment_blocks");

                    b.HasIndex("BlockTypeId")
                        .HasName("ix_assessment_blocks_block_type_id");

                    b.ToTable("assessment_blocks");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentParticipantId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnName("application_user_id")
                        .HasColumnType("uuid");

                    b.Property<int>("AssessmentId")
                        .HasColumnName("assessment_id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentParticipantUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_assessment_participants");

                    b.HasIndex("ApplicationUserId")
                        .HasName("ix_assessment_participants_application_user_id");

                    b.HasIndex("AssessmentId")
                        .HasName("ix_assessment_participants_assessment_id");

                    b.ToTable("assessment_participants");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_assessment_types");

                    b.ToTable("assessment_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 346, DateTimeKind.Local).AddTicks(4610),
                            Name = "DualNBack",
                            SortOrder = 1,
                            Uid = new Guid("deef710f-70ea-4f23-8263-1b5153a58fb4"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 346, DateTimeKind.Local).AddTicks(4640)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 346, DateTimeKind.Local).AddTicks(5090),
                            Name = "EFT",
                            SortOrder = 2,
                            Uid = new Guid("56d67e12-7ef6-447f-9d66-35f5aac97cc7"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 346, DateTimeKind.Local).AddTicks(5100)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentVersionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssessmentTypeId")
                        .HasColumnName("assessment_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("BlankScreenViewingTime")
                        .HasColumnName("blank_screen_viewing_time")
                        .HasColumnType("integer");

                    b.Property<int?>("CognitiveLoadViewingTime")
                        .HasColumnName("cognitive_load_viewing_time")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ImageViewingTime")
                        .HasColumnName("image_viewing_time")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssessmentVersionUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.Property<string>("VersionName")
                        .HasColumnName("version_name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_assessment_versions");

                    b.HasIndex("AssessmentTypeId")
                        .HasName("ix_assessment_versions_assessment_type_id");

                    b.ToTable("assessment_versions");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.BlockType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_block_types");

                    b.ToTable("block_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(280),
                            Name = "E1",
                            SortOrder = 1,
                            Uid = new Guid("4f5dd866-26c2-4ff6-b042-e000b7265c99"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(310)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(660),
                            Name = "S1",
                            SortOrder = 2,
                            Uid = new Guid("24982c3f-0905-43fe-9709-8fe1c0ddf572"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(660)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(680),
                            Name = "E2",
                            SortOrder = 3,
                            Uid = new Guid("595a13d6-077d-4dfa-94ef-83e2b914353b"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(690)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(700),
                            Name = "S2",
                            SortOrder = 4,
                            Uid = new Guid("c6be6eb6-9f00-4d6d-83bb-965aa5ce5cba"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 350, DateTimeKind.Local).AddTicks(700)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.BlockVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockVersionId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssessmentVersionId")
                        .HasColumnName("assessment_version_id")
                        .HasColumnType("integer");

                    b.Property<int>("BlockTypeId")
                        .HasColumnName("block_type_id")
                        .HasColumnType("integer");

                    b.Property<bool>("CognitiveLoad")
                        .HasColumnName("cognitive_load")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Series")
                        .HasColumnName("series")
                        .HasColumnType("text");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BlockVersionUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_block_versions");

                    b.HasIndex("AssessmentVersionId")
                        .HasName("ix_block_versions_assessment_version_id");

                    b.HasIndex("BlockTypeId")
                        .HasName("ix_block_versions_block_type_id");

                    b.ToTable("block_versions");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ParticipantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParticipantTypeId")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("created_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SortOrder")
                        .HasColumnName("sort_order")
                        .HasColumnType("integer");

                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ParticipantTypeUid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnName("updated_by")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_participant_types");

                    b.ToTable("participant_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 354, DateTimeKind.Local).AddTicks(9130),
                            Name = "Civilian",
                            SortOrder = 1,
                            Uid = new Guid("8b2018c5-6d9f-40ea-9b26-ebbfb963f30d"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 354, DateTimeKind.Local).AddTicks(9160)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 9, 12, 19, 58, 43, 354, DateTimeKind.Local).AddTicks(9530),
                            Name = "Veteran",
                            SortOrder = 2,
                            Uid = new Guid("8bda851b-3d8d-4822-94ee-698c68058cf4"),
                            UpdateDate = new DateTime(2020, 9, 12, 19, 58, 43, 354, DateTimeKind.Local).AddTicks(9530)
                        });
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ParticipantType", "ParticipantType")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ParticipantTypeId")
                        .HasConstraintName("fk_users_participant_types_participant_type_id");
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserAudit", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUserAuditType", "ApplicationUserAuditType")
                        .WithMany("ApplicationUserAudits")
                        .HasForeignKey("ApplicationUserAuditTypeId")
                        .HasConstraintName("fk_application_user_audits_application_user_audit_types_applic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserAudits")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("fk_application_user_audits_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.AssessmentVersion", "AssessmentVersion")
                        .WithMany("Assessments")
                        .HasForeignKey("AssessmentVersionId")
                        .HasConstraintName("fk_assessments_assessment_versions_assessment_version_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentBlock", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentBlocks")
                        .HasForeignKey("BlockTypeId")
                        .HasConstraintName("fk_assessment_blocks_assessments_assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.BlockType", "BlockType")
                        .WithMany("AssessmentBlocks")
                        .HasForeignKey("BlockTypeId")
                        .HasConstraintName("fk_assessment_blocks_block_types_block_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentParticipant", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("AssessmentParticipants")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("fk_assessment_participants_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEngine.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentParticipants")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("fk_assessment_participants_assessments_assessment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.AssessmentVersion", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.AssessmentType", "AssessmentType")
                        .WithMany("AssessmentVersions")
                        .HasForeignKey("AssessmentTypeId")
                        .HasConstraintName("fk_assessment_versions_assessment_types_assessment_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssessmentEngine.Domain.Entities.BlockVersion", b =>
                {
                    b.HasOne("AssessmentEngine.Domain.Entities.AssessmentVersion", null)
                        .WithMany("BlockVersions")
                        .HasForeignKey("AssessmentVersionId")
                        .HasConstraintName("fk_block_versions_assessment_versions_assessment_version_id");

                    b.HasOne("AssessmentEngine.Domain.Entities.BlockType", "BlockType")
                        .WithMany()
                        .HasForeignKey("BlockTypeId")
                        .HasConstraintName("fk_block_versions_block_types_block_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
